@using SharedHelpers.DataTransferObjects
@inject NavigationManager _nav
@inject IRequestService _irs

@page "/history"


<h3 class="text-center">History</h3>

@if (allMatches is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" style="margin-bottom:0px; padding-bottom:0px;">
        <thead>
            <tr>
                <th scope="col">Nr</th>
                <th scope="col">Winner</th>
                <th scope="col">Looser</th>
                <th scope="col">Date</th>
                <th scope="col">Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (MatchHistoryDto match in allMatches)
            {
                <tr>
                    <td>@(index++)</td>
                    <th scope="row">
                        @if (match.Winner.Name == "Unknown")
                        {
                            <p style="color:red">@match.Winner.Id</p>
                        }
                        else
                        {
                            @match.Winner.Name
                        }
                    </th>
                    <td>
                        @if (match.Loser.Name == "Unknown")
                        {
                            <p style="color:red">@match.Loser.Id</p>
                        }
                        else
                        {
                            @match.Loser.Name
                        }
                    </td>
                    <td>@match.Timestamp</td>

                    <td><button @onclick="(() => RemoveObjAsync(match))" class="btn btn-sm btn-outline-danger">X</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private IEnumerable<MatchHistoryDto>? allMatches;
    //private IEnumerable<Hamster>? allHamsters;
    private int index = 0; //Indexer for Foreach

    protected override async Task OnInitializedAsync()
    {
        //allHamsters = await _irs.GetAllHamstersAsync();
        allMatches = await _irs.GetAllMatchesAsync();
    }

    public async Task RemoveObjAsync(MatchHistoryDto matchHistoryDto)
    {
        await _irs.RemoveObjectAsync<Match>("match", matchHistoryDto.Id);
        _nav.NavigateTo(_nav.Uri, forceLoad: true);
    }
}